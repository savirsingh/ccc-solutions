// code by savir singh
// https://dmoj.ca/problem/gfssoc3s4
// 100/100

// auto-generated by cpide
// the ide built for competitive programming

//================================================================
// Name        : gfssoc3s4.cpp
// Author      : volcano
// Description : another bitmask dp
//================================================================

#include <bits/stdc++.h>
using namespace std;

const int MM = 100, MMM = 3000, mod = 1e9 + 7;

int r, c;
long long dp[MM][MMM], ans = 0;
vector<int> good, use[MMM];

int32_t main() {
    ios::sync_with_stdio(false);cin.tie(nullptr);
    cin >> r >> c;
    for (int mask = 0; mask < 1 << c - 2; ++mask) {
        if ((mask & mask << 1) == 0 && (mask & mask << 2) == 0) {
            good.push_back(mask);
        }
    }
    for (int i = 0; i < good.size(); ++i) {
        int curmask = good[i];
        dp[0][i] = 1; ++ans;
        for (int j = 0 ;j < good.size(); ++j) {
            int commask = good[j] | good[j] << 1 | good[j] >> 1;
            if ((curmask & commask) == 0) use[i].push_back(j);
        }
    }
    ans -= dp[0][0];
    for (int i = 1; i < r - 1; ++i) { // first/last row can't have any
        for (int j = 0; j < good.size(); ++j) {
            int curmask = good[j];
            for (auto m : use[j]) {
                dp[i][j] += dp[i-1][m];
            }
            dp[i][j] %= mod;
            ans = (ans + dp[i][j]) % mod;
        }
        ans = (ans - dp[i][0] + mod) % mod;
    }
    cout << ans << endl;
}
