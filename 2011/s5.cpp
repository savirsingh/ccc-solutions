// code by savir singh
// 100/100 on DMOJ

// auto-generated by cpide
// the ide built for competitive programming

//================================================================
// Name        : ccc11s5.cpp
// Author      : volcano
// Description : bitmask bfs thing
//================================================================

#include <bits/stdc++.h>
using namespace std;
#define pii pair<int, int>
#define mp make_pair
#define f first
#define s second

const int MM = 25;
const int MMM = 1 << MM;
int k;
bool visited[MMM];

// first: cost
// second: current state

int main() {
    ios::sync_with_stdio(false);cin.tie(nullptr);
    memset(visited, false, sizeof visited);
    cin >> k;
    int curre = 0;
    for (int i = 0, bit; i < k; ++i) {
        curre <<= 1; cin >> bit;curre |= bit;
    }
    deque<pii> deq;
    visited[curre] = true;
    deq.push_back(mp(0, curre));
    // bfs
    while (!deq.empty()) {
        auto cur = deq.front(); deq.pop_front();
        if (cur.s == 0) {cout<<cur.f<<endl;return false;} // no more lights on
        for (int i = 0; i < k; ++i) {
            if (!(cur.s & 1 << i)) {
                int nxt = cur.s | (1<<i);
                int cnt = 0;
                for (int j = 0; j < k; ++j) {
                    if (nxt & 1 << j) ++cnt;
                    else {
                        if (cnt > 3) { // turn off lights in the sequence of 4
                            for (int m = j - cnt; m < j; ++m) nxt &= ~(1 << m); // clear bit and turn off
                        }
                        cnt = 0; // reset sequence tracker
                    }
                }
                if (cnt > 3) { // turn off lights in the sequence of 4
                    for (int m = k - cnt; m < k; ++m) nxt &= ~(1 << m); // clear bit and turn off
                }
                if (!visited[nxt]) {visited[nxt]=1;deq.push_back(mp(cur.f + 1, nxt));}
            }
        }
    }
}
